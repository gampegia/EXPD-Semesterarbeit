ggplot2(iris$Sepal.Length)
ggplot2(iris$Species)
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
iris <- iris
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot2(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot2::aes(x = sepal.length, y = sepal.width)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
source("~/GitHub/ZHAW/Semester 1/ExpD/ExpD_P_10.R", echo=TRUE)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
library ggplot2::
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
library ggplot
library(ggplot2)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(data = iris, aes(x = sepal.length, y = sepal.widt))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt) +
geom_point())
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(colours(species))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = Species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = Species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(colours = Species)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species, size = Petal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Species)) +
geom_bar()
View(iris)
View(iris)
ggplot(data = iris, mapping = aes(x = Petal.width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Petal.Width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = 'pink')) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = 'pink')) +
geom_bar(color = 'pink')
ggplot(data = iris, mapping = aes(x = Sepal.Width)) +
geom_bar(color = 'pink')
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = "deeppink")) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, density(.5))) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha(.2))
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, alpha(.2))) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, )) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha = 0.2)
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_violin()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_violin()
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin()
geom_point()
geom_point()
geom_point(colors = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(colors = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(color = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(color = 'black', jitter = TRUE)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(position = "jitter", color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = "deeppink")) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha = 0.2)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(position = "jitter", color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 2)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 5)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 3)
library(readr)
zehnkampf_2021 <- read_delim("GitHub/ZHAW/Semester 1/ExpD/Grundlagen/zehnkampf_2021.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(zehnkampf_2021)
# Aufgabe a)
boxplot(data = zehnkampf_2021)
# Aufgabe a)
boxplot(x = formula ,data = zehnkampf_2021)
# Aufgabe a)
boxplot(zehnkampf_2021)
# Aufgabe a)
ggplot(zehnkampf_2021) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Variable, y = Value)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, y = 100m)) +
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte)) +
geom_boxplot()
library(ggplot2)
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = c(Punkte, 100m))) +
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = c(Punkte, 100m))) +
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, 100m)) +
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, y = `100m`)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, y = `m100`)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, m100)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte, m100)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = c(Punkte, m100))) +
geom_boxplot()
ggplot(zehnkampf_2021, aes(x = factor(Punkte), y = ..count..)) +
geom_boxplot(aes(fill = factor(m100)), position = "dodge") +
labs(title = "Boxplot for Punkte and m100", x = "Punkte", y = "Count") +
scale_fill_discrete(name = "m100")
diag_shooting_type <- ggplot(dat, aes(x = casualties, y = shooting_type)) +
geom_boxplot()
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
install.packages("ggplot2")
library(ggplot2)
library(readr)
dat <- read_csv("school-shootings-data.csv")
View(school_shootings_data)
# Age of Shooter
vec_shooter_age <- c(dat$age_shooter1,dat$age_shooter2)
vec_shooter_age <- na.exclude(vec_shooter_age)
View(vec_shooter_age)
hist(vec_shooter_age, col = "lightblue", xlab = "Age [Years]",
main = "Age of school shooters", ylab = "Density",
breaks = c(seq(0, 80, by = 1)),
las = 1, freq = FALSE)
axis(side=1, at=seq(0, 100, by=10))
median_age_shooter <- median(vec_shooter_age,na.rm = TRUE)
abline(v = median_age_shooter, col = "red", lty = 1, lwd = 2)
legend("top", legend = paste("Median =", median_age_shooter), col = "red", lty = 1, lwd = 2)
# Number schoolshootings
hist(dat$year,
breaks = c(seq(1999, 2023)),
main = "Numbers of school shootings in the US since 1999",
xaxt = "n",
xlab = "Years",
col = "lightblue")
axis(side = 1, at = seq(1999, 2023, by = 1), las = 2)
meanshootings <- length(dat$year)/length(unique(dat$year))
# Median
mediantable <- table(dat$year)
medianshootings <- median(c(mediantable))
# Add Median and Legend to plot
abline(h = medianshootings, col = "red", lty = 1, lwd = 2)
legend("top", legend = paste("Median Shootings: ", round(medianshootings, 2)), col = "red", lty = 1, lwd = 2)
# W8
# Diagramm 1
plot(x = dat$age_shooter1,
y = dat$casualties,
col = adjustcolor("black", alpha = 0.2),
pch = 19,
main = "Shooter Age / Number of casualties",
ylab = "Number of casualties",
xlab = "Age of the shooter",
log = "y",
)
abline(v = median_age_shooter, col = "red", lwd = 2)
legend("topright", legend = paste("Median age of shooter: ", round(median_age_shooter, 2)), col = "red", lty = 1, lwd = 2)
# DIAGRAMM 2
diag_shooting_type <- ggplot(dat, aes(x = casualties, y = shooting_type)) +
geom_boxplot()
diag_shooting_type + labs(x = "Casualties" , y = "Shooting Type" , title ="Casulties per shooting Type"  )
#------------------------------------------------
library(ggplot2)
install.packages("ggmap")
library(ggmap)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = df, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = c(Punkte))) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = c(Punkte, weit))) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(c(Punkte, weit))) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(Punkte, weit)) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, Punkte, weit) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(c(Punkte, weit))) +
geom_boxplot()
# Aufgabe a)
ggplot(zehnkampf_2021, aes(x = Punkte)) +
geom_boxplot()
# Read the data
data <- read.csv(text = "Rang;Name;Punkte;m100;weit;kugel;hoch;m400;hurd;disc;stab;speer;m1500
1;Damian Warner;9018;10.12;8.24;14.8;2.02;47.48;13.46;48.67;4.9;63.44;271.08
2;Kevin Mayer;8726;10.68;7.5;15.07;2.08;50.31;13.9;48.08;5.2;73.09;283.17
3;Ashley Moloney;8649;10.34;7.64;14.49;2.11;46.29;14.08;44.38;5;57.12;279.19
4;Garret Scantling;8611;10.67;7.3;15.59;1.99;48.25;14.03;45.46;5.1;69.1;275.54
5;Pierce Lepage;8604;10.43;7.65;15.31;1.99;46.92;14.39;47.14;5;57.24;271.85
6;Zach Ziemek;8435;10.55;7.2;14.99;2.05;49.06;14.51;44.87;5.3;60.44;278.38
7;Lindon Victor;8414;10.67;7.24;15.39;2.02;49.21;14.83;49.75;4.9;71.56;294.32
8;Ilya Shkurenyov;8413;10.93;7.59;14.95;1.99;48.98;14.43;47.02;5.1;60.95;274.62
9;Jorge Urena;8322;10.66;7.3;13.97;2.05;48;14.13;43.7;4.9;55.82;267.82
10;Steven Bastien;8236;10.69;7.39;14.4;2.05;47.64;14.42;40.77;4.6;58.21;266.95
11;Johannes Erm;8213;11.04;7.36;14.6;1.99;48.25;14.55;45.72;4.8;58.41;268.42
12;Pawe? Wiesiolek;8176;10.83;7.27;14.9;2.02;48.24;14.95;48.27;4.8;51.6;270.02
13;Vitaliy Zhuk;8131;11.04;6.93;16.23;1.96;49.22;14.95;47.01;5.1;59.49;282.57
14;Kai Kazmirek;8126;11.09;7.48;14.46;2.02;48.17;14.73;42.7;4.8;63.76;288.3
15;Maicel Uibo;8037;11.32;7.37;13.95;2.02;50.82;14.83;46.38;5.5;50.64;278.64
16;Adam Helcelet;8004;11.06;7.16;14.99;1.96;49.41;14.35;45.4;4.6;61.54;284.74
17;Jiri Sykora;7943;11.18;7.03;14.63;1.9;48.89;14.48;49.9;4.6;63.73;294.97
18;Felipe dos Santos;7880;10.58;7.38;14.13;2.02;49.31;14.58;39.91;4.6;54.56;292.4
19;Martin Roe;7863;10.86;7.03;13.98;1.96;50.93;15.47;48.37;4.8;62.28;287.58", sep = ";")
# Convert data to long format
data_long <- gather(data, key = "Variable", value = "Value", -Rang, -Name)
# Create boxplot
ggplot(data_long, aes(x = Variable, y = Value)) +
geom_boxplot() +
facet_wrap(~ Name, scales = "free_y", ncol = 2) +
labs(title = "Boxplots for Athletes", x = "Variable", y = "Value")
# Convert data to long format
data_long <- gather(data, key = "Variable", value = "Value", -Rang, -Name)
library(ggplot2)
library(tidyr)
# Read the data
data <- read.csv(text = "Rang;Name;Punkte;m100;weit;kugel;hoch;m400;hurd;disc;stab;speer;m1500
1;Damian Warner;9018;10.12;8.24;14.8;2.02;47.48;13.46;48.67;4.9;63.44;271.08
2;Kevin Mayer;8726;10.68;7.5;15.07;2.08;50.31;13.9;48.08;5.2;73.09;283.17
3;Ashley Moloney;8649;10.34;7.64;14.49;2.11;46.29;14.08;44.38;5;57.12;279.19
4;Garret Scantling;8611;10.67;7.3;15.59;1.99;48.25;14.03;45.46;5.1;69.1;275.54
5;Pierce Lepage;8604;10.43;7.65;15.31;1.99;46.92;14.39;47.14;5;57.24;271.85
6;Zach Ziemek;8435;10.55;7.2;14.99;2.05;49.06;14.51;44.87;5.3;60.44;278.38
7;Lindon Victor;8414;10.67;7.24;15.39;2.02;49.21;14.83;49.75;4.9;71.56;294.32
8;Ilya Shkurenyov;8413;10.93;7.59;14.95;1.99;48.98;14.43;47.02;5.1;60.95;274.62
9;Jorge Urena;8322;10.66;7.3;13.97;2.05;48;14.13;43.7;4.9;55.82;267.82
10;Steven Bastien;8236;10.69;7.39;14.4;2.05;47.64;14.42;40.77;4.6;58.21;266.95
11;Johannes Erm;8213;11.04;7.36;14.6;1.99;48.25;14.55;45.72;4.8;58.41;268.42
12;Pawe? Wiesiolek;8176;10.83;7.27;14.9;2.02;48.24;14.95;48.27;4.8;51.6;270.02
13;Vitaliy Zhuk;8131;11.04;6.93;16.23;1.96;49.22;14.95;47.01;5.1;59.49;282.57
14;Kai Kazmirek;8126;11.09;7.48;14.46;2.02;48.17;14.73;42.7;4.8;63.76;288.3
15;Maicel Uibo;8037;11.32;7.37;13.95;2.02;50.82;14.83;46.38;5.5;50.64;278.64
16;Adam Helcelet;8004;11.06;7.16;14.99;1.96;49.41;14.35;45.4;4.6;61.54;284.74
17;Jiri Sykora;7943;11.18;7.03;14.63;1.9;48.89;14.48;49.9;4.6;63.73;294.97
18;Felipe dos Santos;7880;10.58;7.38;14.13;2.02;49.31;14.58;39.91;4.6;54.56;292.4
19;Martin Roe;7863;10.86;7.03;13.98;1.96;50.93;15.47;48.37;4.8;62.28;287.58", sep = ";")
# Convert data to long format
data_long <- gather(data, key = "Variable", value = "Value", -Rang, -Name)
# Create boxplot
ggplot(data_long, aes(x = Variable, y = Value)) +
geom_boxplot() +
facet_wrap(~ Name, scales = "free_y", ncol = 2) +
labs(title = "Boxplots for Athletes", x = "Variable", y = "Value")
return(c(area, circumference))
radius <- function(r){
area <- (r^2)*pi
circumference <- 2*r*pi
return(c(area, circumference))
}
radius(5)
return(avg)
mittelwert <- function(vec){
vec <- na.omit(vec)
len <- length(vec)
avg <- m(vec) / len
return(avg)
}
mittelwert(v_a)
v_a <- 1:100
v_b <- 3
v_c <- c(2, 4, 5, NA, 6)
mittelwert(v_a)
print(vec)
mittelwert(v_a)
mittelwert <- function(vec) {
vec <- na.omit(vec)
len <- length(vec)
avg <- sum(vec) / len
return(avg)
}
v_a <- 1:100
v_b <- 3
v_c <- c(2, 4, 5, NA, 6)
mittelwert(v_a)
mittelwert(v_b)
mittelwert(v_c)
mean(v_a)
mean(v_b)
mean(v_c)
library(readr)
NotenSek3_SO_naturlehre <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-naturlehre.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(NotenSek3_SO_naturlehre)
library(readr)
NotenSek3_SO_mathematik <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-mathematik.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(NotenSek3_SO_mathematik)
library(readr)
NotenSek3_SO_franzoesisch <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-franzoesisch.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(NotenSek3_SO_franzoesisch)
library(readr)
NotenSek3_SO_englisch <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-englisch.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(NotenSek3_SO_englisch)
remove(all)
View(dat)
library(readr)
NotenSek3_SO_naturlehre <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-naturlehre.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
NotenSek3_SO_mathematik <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-mathematik.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
NotenSek3_SO_franzoesisch <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-franzoesisch.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
NotenSek3_SO_englisch <- read_delim("~/GitHub/ZHAW/Semester 1/ExpD/Grundlagen/NotenSek3-SO-englisch.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
list(NotenSek3_SO_englisch, NotenSek3_SO_mathematik, NotenSek3_SO_naturlehre, NotenSek3_SO_franzoesisch)
colnames(NotenSek3_SO_englisch, Namen)
View(NotenSek3_SO_englisch)
View(NotenSek3_SO_englisch)
new_colnames <- c("Namen", "p1", "p2", "p3", "p4", "p5", "p6", "p74")
colnames(NotenSek3_SO_englisch) <- new_colnames
colnames(NotenSek3_SO_englisch) <- new_colnames
colnames(NotenSek3_SO_mathematik) <- new_colnames
colnames(NotenSek3_SO_naturlehre) <- new_colnames
colnames(NotenSek3_SO_franzoesisch) <- new_colnames
View(NotenSek3_SO_englisch)
colnames(NotenSek3_SO_englisch) <- new_colnames
colnames(NotenSek3_SO_mathematik) <- new_colnames
colnames(NotenSek3_SO_naturlehre) <- new_colnames
colnames(NotenSek3_SO_franzoesisch) <- new_colnames
new_colnames <- c("Namen", "p1", "p2", "p3", "p4", "p5", "p6", "p7")
colnames(NotenSek3_SO_englisch) <- new_colnames
colnames(NotenSek3_SO_mathematik) <- new_colnames
colnames(NotenSek3_SO_naturlehre) <- new_colnames
colnames(NotenSek3_SO_franzoesisch) <- new_colnames
sapply(NotenSek3_SO_englisch, NotenSek3_SO_mathematik)
sapply(NotenSek3_SO_englisch, length)
sapply(NotenSek3_SO_englisch, length)
sapply(NotenSek3_SO_mathematik, length)
sapply(NotenSek3_SO_naturlehre, length)
sapply(NotenSek3_SO_franzoesisch, length)
order(NotenSek3_SO_englisch)
eng <- lapply(NotenSek3_SO_englisch, order)
View(eng)
math <- lapply(NotenSek3_SO_mathematik, order)
fran <- lapply(NotenSek3_SO_franzoesisch, order)
eng <- lapply(NotenSek3_SO_englisch, order)
math <- lapply(NotenSek3_SO_mathematik, order)
nat <- lapply(NotenSek3_SO_naturlehre, order)
fran <- lapply(NotenSek3_SO_franzoesisch, order)
order(NotenSek3_SO_englisch)
sorted <- df[order(NotenSek3_SO_englisch$Name), ]
View(NotenSek3_SO_englisch)
sorted <- df[order(NotenSek3_SO_englisch$Namen), ]
# Sort the data frame based on the values in the 'Namen' column
df_sorted <- NotenSek3_SO_englisch[order(NotenSek3_SO_englisch$Namen), ]
# Print the sorted data frame
print(df_sorted)
eng <- NotenSek3_SO_englisch[order(NotenSek3_SO_englisch$Namen), ]
math <- NotenSek3_SO_mathematik[order(NotenSek3_SO_mathematik$Namen), ]
nat <- NotenSek3_SO_naturlehre[order(NotenSek3_SO_naturlehre$Namen), ]
fran <- NotenSek3_SO_franzoesisch[order(NotenSek3_SO_franzoesisch$Namen), ]
View(df_sorted)
remove(df_sorted)
print(eng)
print(math)
eng[1]
dataframe[order(dataframe$Name)]
return(dataframe)
sortieren <- function(dataframe){
dataframe[order(dataframe$Name)]
return(dataframe)
}
eng <- sortieren(NotenSek3_SO_englisch)
sortieren <- function(dataframe){
dataframe[order(dataframe$Namen)]
return(dataframe)
}
eng <- sortieren(NotenSek3_SO_englisch)
return(namen)
fnamen <- function(dataframe){
namen <- dataframe[1]
return(namen)
}
namen_eng <- fnamen(eng)
namen_eng <- fnamen(eng)
View(namen_eng)
View(namen_eng)
fnamen <- function(dataframe){
namen <- dataframe[, "Namen"]
return(namen)
}
namen_eng <- fnamen(eng)
namen_eng <- fnamen(eng)
nameneng <- eng[,1]
nameneng <- eng$Namen
namen <- dataframe$Namen
fnamen <- function(dataframe){
namen <- dataframe$Namen
return(namen)
}
namen_eng <- fnamen(eng)
namen_eng <- fnamen(eng)
namen_math <- fnamen(math)
namen_nat <- fnamen(nat)
namen_fran <- fnamen(fran)
namen_eng == namen_fran
namen_eng == namen_fran == namen_math
namen_eng == namen_fran
namen_eng == namen_math
namen_eng == namen_nat
lenght(namen_eng == namen_fran)
length(namen_eng == namen_fran)
length(namen_eng == namen_fran)
length(namen_eng == namen_math)
length(namen_eng == namen_nat)
sapply(eng, rowMeans, except = "Namen")
sapply(eng, rowMeans)
sapply((eng, rowMeans(eng))
sapply(eng, rowMeans)
sapply(eng, rowMeans(x = p1))
sapply(eng, rowMeans(x = p1 ~ p7))
sapply(eng, rowMeans(x = p1 ~ p7, na.rm = TRUE))
namen_eng[-1]
namen_eng[1]
namen_eng[-1]
source("~/GitHub/ZHAW/Semester 1/ExpD/ExpD_P_12.R")
