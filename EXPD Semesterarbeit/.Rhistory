datmax <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
max
datdate
datdate <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max)
datdate
datlength<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = sum)
datlength<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
datlength
dat$length<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max)
dat
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max)
dat
dat <- merge(c(datdate, datlength, datmax, datmean),
by = ~"Group")
dat$length<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max)
dat
load("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\ZHAW\\Semester 1\\ExpD\\Grundlagen\\bestellungen.rda")
library(readr)
PLZO_CSV_LV03 <- read_delim("GitHub/ZHAW/Semester 1/ExpD/Grundlagen/PLZO_CSV_LV03.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
agg <- merge(x = bestellungen,
y = PLZO_CSV_LV03,
by = c("PLZ", "Zusatzziffer"),
all.x = TRUE)
kantone <- sort(unique(PLZO_CSV_LV03$Kantonskuerzel))
dat$length<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max,
)
dat
dat = 1
dat$length<- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
load("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\ZHAW\\Semester 1\\ExpD\\Grundlagen\\bestellungen.rda")
library(readr)
PLZO_CSV_LV03 <- read_delim("GitHub/ZHAW/Semester 1/ExpD/Grundlagen/PLZO_CSV_LV03.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
agg <- merge(x = bestellungen,
y = PLZO_CSV_LV03,
by = c("PLZ", "Zusatzziffer"),
all.x = TRUE)
kantone <- sort(unique(PLZO_CSV_LV03$Kantonskuerzel))
dat <- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max,
)
dat$length <- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max,
)
View(dat)
dat$length <- aggregate(agg$Kantonskuerzel,
by = list(agg$Kantonskuerzel),
FUN = length)
dat$mean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = mean)
dat$max <- datmean <- aggregate(agg$preis,
by = list(agg$Kantonskuerzel),
FUN = max)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max,
)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max,
)
dat$date <- datmean <- aggregate(agg$timestamp,
by = list(agg$Kantonskuerzel),
FUN = max)
tinytex::install_tinytex()
tinytex::install_tinytex()
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
install.packages("ggplot2")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
```{r include=FALSE}
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
install.packages("ggplot2")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# Set a CRAN mirror
chooseCRANmirror(ind=1)  # You can choose a different index if the default doesn't work
# Install and load required packages
if (!requireNamespace("readr", quietly = TRUE)) {
install.packages("readr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(readr)
library(ggplot2)
# Read data
dat <- read_csv("school-shootings-data.csv")
## Quarto
Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.
install.packages("quarto")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# Set a CRAN mirror
chooseCRANmirror(ind=1)  # You can choose a different index if the default doesn't work
# Install and load required packages
if (!requireNamespace("readr", quietly = TRUE)) {
install.packages("readr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(readr)
library(ggplot2)
# Read data
dat <- read_csv("school-shootings-data.csv")
## Quarto
Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# Set a CRAN mirror
chooseCRANmirror(ind=1)  # You can choose a different index if the default doesn't work
# Install and load required packages
if (!requireNamespace("readr", quietly = TRUE)) {
install.packages("readr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(readr)
library(ggplot2)
# Read data
dat <- read_csv("school-shootings-data.csv")
## Quarto
Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
install.packages("ggplot2")
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
getwd
getwd()
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
#| label: setup
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
# setwd("C:\\Users\\glm87\\Documents\\GITHUB\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
library("ggplot2")
dat <- read_csv("school-shootings-data.csv")
# Age of Shooter
vec_shooter_age <- c(dat$age_shooter1,dat$age_shooter2)
vec_shooter_age <- na.exclude(vec_shooter_age)
View(vec_shooter_age)
hist(vec_shooter_age, col = "lightblue", xlab = "Age [Years]",
main = "Age of school shooters", ylab = "Density",
breaks = c(seq(0, 80, by = 1)),
las = 1, freq = FALSE)
axis(side=1, at=seq(0, 100, by=10))
median_age_shooter <- median(vec_shooter_age,na.rm = TRUE)
abline(v = median_age_shooter, col = "red", lty = 1, lwd = 2)
legend("top", legend = paste("Median =", median_age_shooter), col = "red", lty = 1, lwd = 2)
data("iris")
ggplot2::data
ggplot2:data()
dat <- data("iris")
dat <- iris
remove(iris)
iris
remove(iris)
romeve(dat)
remove(dat)
iris
iris <- iris
ggplot2::(iris)
ggplot2(iris)
ggplot2(iris$Sepal.Length)
ggplot2(iris$Species)
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
iris <- iris
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot2(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot2::aes(x = sepal.length, y = sepal.width)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
source("~/GitHub/ZHAW/Semester 1/ExpD/ExpD_P_10.R", echo=TRUE)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
library ggplot2::
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
library ggplot
library(ggplot2)
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(iris, aes(x = sepal.length, y = sepal.widt))
ggplot(data = iris, aes(x = sepal.length, y = sepal.widt))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt) +
geom_point())
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Widt)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(colours(species))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = Species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width), colours = Species) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(colours = Species)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species, size = Petal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Species)) +
geom_bar()
View(iris)
View(iris)
ggplot(data = iris, mapping = aes(x = Petal.width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Petal.Width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = 'pink')) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = 'pink')) +
geom_bar(color = 'pink')
ggplot(data = iris, mapping = aes(x = Sepal.Width)) +
geom_bar(color = 'pink')
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = "deeppink")) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, color = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, density(.5))) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha(.2))
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, alpha(.2))) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species, )) +
geom_density()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha = 0.2)
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_violin()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_violin()
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin()
geom_point()
geom_point()
geom_point(colors = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(colors = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(color = 'black')
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(color = 'black', jitter = TRUE)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(position = "jitter", color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species)) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = "deeppink")) +
geom_bar()
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_density(alpha = 0.2)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_point(position = "jitter", color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 2)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 5)
ggplot(data = iris, mapping = aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_violin() +
geom_jitter(color = 'black', alpha = 0.7, size = 3)
library(ggmosaic)
library(readr)
dat <- read_csv("school-shootings-data.csv")
View(school_shootings_data)
setwd("C:\\Users\\jonas\\OneDrive\\Dokumente\\GitHub\\EXPD-Semesterarbeit\\EXPD Semesterarbeit")
library(readr)
dat <- read_csv("school-shootings-data.csv")
View(dat)
ggplot(data = dat, mapping = aes(x = killed, y = injured)) +
geom_point()
ggplot(data = dat, mapping = aes(x = injured, y = killed)) +
geom_point()
library(readr)
US_partys <- read_csv("US partys.csv")
View(US_partys)
View(US_partys)
US_partys$dominant_party <- ifelse(US_partys$`Republican/lean Rep.` > US_partys$`Democrat/lean Dem.`, "Republican", "Democratic")
names(US_partys)[names(US_partys) == "State"] <- "state"
merged_data <- merge(dat, US_partys[,c("state", "dominant_party")],
by = "state",
all.x = TRUE)
dat <- merge(dat, US_partys[,c("state", "dominant_party")],
by = "state",
all.x = TRUE)
remove(merged_data)
count.fields(dat$dominant_party)
unique(dat$dominant_party)
ggplot(data = dat, mapping = aes(x = injured, y = killed, color = dominant_party)) +
geom_point()
party_colors <- c("Democratic" = "blue", "Republican" = "red")
ggplot(data = dat, mapping = aes(x = injured, y = killed, color = dominant_party)) +
geom_point()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party)) +
geom_point() +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party)) +
geom_point(alpha = 0.5) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = gender)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = gender_shooter1)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = day_of_week)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log10()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log5()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log20()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log10()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log10()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors) +
scale_y_log10()
ggplot(data = dat, aes(x = injured, y = killed, color = dominant_party, shape = school_type)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
scale_color_manual(values = party_colors)
